{"version":3,"sources":["Rules.js","index.js"],"names":["Rules","className","React","Component","Box","selectBox","props","row","cols","this","boxClass","id","onClick","Grid","width","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","e","gridSize","ButtonGroup","Button","playButton","pauseButton","slow","fast","seed","clear","DropdownButton","as","title","onSelect","Dropdown","Item","eventKey","Main","col","state","isPlaying","gridCopy","arrayClone","setState","play","Math","floor","random","clearInterval","intervalId","setInterval","speed","grid","Array","fill","map","generation","size","g","g2","count","arr","JSON","parse","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9de97c29.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nexport class Rules extends React.Component {\r\n    //Rules go here\r\n    render() {\r\n        return (\r\n            <div className ='rules'>\r\n                <h2>Rules:</h2>\r\n                <ul>\r\n                    <li>Live cells with 2 or 3 neighbors, lives and moves on to next generation.</li>\r\n                    <li>Live cells with less than 2 neighbors, dies (simulates underpopulation).</li>\r\n                    <li>Live cells with more than 3 neighbors dies (simulates overpopulation).</li>\r\n                    <li>Dead cells with <strong>exactly</strong> 3 neighbors, will come to life (simulates reproduction).</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport { Rules } from './Rules.js'\n//Box component\n\nclass Box extends React.Component {\n  //selectBox function\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.cols)\n  } \n  render(){\n    return (\n\n      <div \n        className={this.props.boxClass}\n        id = {this.props.id}\n        onClick = {this.selectBox}\n      />\n    )\n  }\n} //End Box component\n\n//Make the grid component\n\nclass Grid extends React.Component {\n  render(){\n    const width = (this.props.cols * 16) + 1\n    var rowsArr = []\n\n    var boxClass = '';\n    for (let i=0; i < this.props.rows; i++){\n      for(let j = 0; j < this.props.cols; j++){\n          let boxId = i + '_' + j; //creates id for each box element\n\n          boxClass = this.props.gridFull[i][j] ? 'box on' : 'box off'; //tells color of box based on css\n          //push boxes into rows array\n          rowsArr.push(\n            <Box \n              boxClass={boxClass} key={boxId} boxId={boxId} row={i} cols={j} selectBox={this.props.selectBox} \n            />\n          )\n      }\n    }\n    return(\n      // pass props to this component for gridfull\n      <div className='grid' style={{width: width}}>\n        {rowsArr}\n        \n      </div>\n    )\n  }\n} // End Grid Component\n\n//Buttons Component\nclass Buttons extends React.Component {\n\n  //handle select function\n  handleSelect = (e) => {\n    this.props.gridSize(e)\n  }\n  render() {\n    return (\n      <div className = 'center'>\n        <ButtonGroup>\n          <Button className=\"btn\" onClick={this.props.playButton}> Play </Button>{' '}\n          <Button className=\"btn btn-default\" onClick={this.props.pauseButton}> Pause </Button>{' '}\n          <Button className=\"btn btn-default\" onClick={this.props.slow}> Slow </Button>{' '}\n          <Button className=\"btn btn-default\" onClick={this.props.fast}> Fast </Button>{' '}\n          <Button className=\"btn btn-default\" onClick={this.props.seed}> Seed </Button>{' '}\n          <Button className=\"btn btn-default\" onClick={this.props.clear}> Clear </Button>{' '}\n      {/* Work on button aesthetic for bootstrap*/}\n          <DropdownButton className= 'center' as={ButtonGroup} title='Grid Size' id='size-menu' onSelect={this.handleSelect}>\n          <Dropdown.Item eventKey='1'>25 x 25 - Small</Dropdown.Item>{' | '}\n          <Dropdown.Item eventKey='2'>50 x 50 - Medium</Dropdown.Item>{' | '}\n          <Dropdown.Item eventKey='3'>100 x 100 - Large</Dropdown.Item>\n          </DropdownButton>\n        </ButtonGroup>\n\n      </div>\n    )\n  }\n}\n\n//End Buttons Component\n\n\n//Main Component and Game Buttons\n\nclass Main extends React.Component{\n  constructor() {\n    super();\n    //stuff that will be referenced later so not added to state\n    this.speed = 100; //how fast the program runs\n    this.rows = 30; // hpw many rows\n    this.cols = 50; // how many columns \n    this.state = { //setting the states\n      generation: 0, //always start at 0 for the genration state\n      //create grid depending on rows and cols and each element set to false /turned off / dead\n      gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false)),\n      isPlaying: false //default for not playing\n    }\n  }\n  //selectBox Method -- possibly fix... on doesn't show but off does\n  selectBox = (row,col) => {\n    if (this.state.isPlaying === true) {\n      return\n    }\n    let gridCopy = arrayClone(this.state.gridFull); //indirectly update state with a copy using helper function\n    gridCopy[row][col] = !gridCopy[row][col]; //set box to opposite of itself\n    this.setState({ //updating state\n      gridFull: gridCopy \n    })\n    if (this.play === true){\n      this.selectBox = false\n    }\n  }\n\n  //Seed board - random placement generator\nseed = () => {\n  let gridCopy = arrayClone(this.state.gridFull);\n  for (let i = 0; i < this.rows; i++) {\n    for (let j = 0; j < this.cols; j++) {\n      if (Math.floor(Math.random() * 4) === 1) {\n        gridCopy[i][j] = true;\n      }\n    }\n  }\n  this.setState({\n    gridFull: gridCopy\n  });\n}\n\n//play button\n//set Interval will call play at the speed set (100ms)\nplayButton = () => {\n  clearInterval(this.intervalId) // start over when clicked\n  this.intervalId = setInterval(this.play, this.speed)\n  this.setState({\n    isPlaying: true\n  })\n}\n\n//Pause button\npauseButton = () => {\n  clearInterval(this.intervalId)\n}\n\n//Slow button\nslow = () => {\n  this.speed= 1000;\n  this.playButton();\n}\n\n//Fast Button\nfast = () => {\n  this.speed = 100;\n  this.playButton();\n}\n//Clear Button\nclear = () => {\n  let grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n  this.setState({\n    gridFull: grid,\n    generation: 0,\n    isPlaying: false\n  });\n}\n\n//Grid Size in order of event key in drop down\n\ngridSize = (size) => {\n  switch (size) {\n    case \"1\":\n      this.cols = 25;\n      this.rows = 25;\n    break\n    case \"2\":\n      this.cols = 50;\n      this.rows = 50;\n    break\n    default:\n      this.cols = 100;\n      this.rows = 100;\n  }\n  this.clear();\n}\n\n//play method and game logic\nplay = () => {\n  let g = this.state.gridFull; //checks state of grid (1st copy)\n  let g2 = arrayClone(this.state.gridFull); // (2nd copy) change the squares on the clone\n//Rules for Conway's game of life\n  for (let i=0; i < this.rows; i++) {\n    for (let j=0; j < this.cols; j++) {\n      let count = 0; //how many neighbors surrond particular cell\n      if (i > 0) if (g[i-1][j]) count++; //if neighbor  + 1\n      if (i > 0 && j > 0) if (g[i-1][j-1]) count++;//if neighbor  + 1\n      if (i > 0 && j < this.cols-1) if (g[i-1][j+1]) count++;//if neighbor  + 1\n      if (j < this.cols-1) if (g[i][j+1]) count++;//if neighbor  + 1\n      if (j > 0) if (g[i][j-1]) count++;//if neighbor  + 1\n      if (i < this.rows-1) if (g[i+1][j]) count++;//if neighbor  + 1\n      if (i < this.rows-1 && j > 0) if (g[i+1][j-1]) count++;//if neighbor  + 1\n      if (i < this.rows-1 && this.cols-1) if (g[i+1][j+1]) count++;//if neighbor  + 1\n      // cell dies if less than 2 neighbors (underpopulation) or more than 3 (overpopulation)\n      //otherwise it stays alive for next generation\n      if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false; \n      //cell is brought to life if EXACTLY 3 neighbors (reproduction)\n      if (!g[i][j] && count === 3) g2[i][j] = true;\n    } \n  }\n  this.setState({ //updates state of grid\n    gridFull: g2,\n    generation: this.state.generation + 1 //go to next generation\n  })\n}\n  //render what will show\n  render(){\n    return (\n      <div>\n        <h1> Conway's Game of Life</h1>\n        {/* Create buttons here */}\n        <Buttons\n          playButton = {this.playButton}\n          pauseButton = {this.pauseButton}\n          slow = {this.slow}\n          fast = {this.fast}\n          clear = {this.clear}\n          seed = {this.seed}\n          gridSize = {this.gridSize}\n        />\n        {/* create grid */}\n        <h2>Generations: {this.state.generation}</h2>\n        <Grid \n        gridFull = {this.state.gridFull} //properties of gridFull\n        rows = {this.rows} // properties of row\n        cols = {this.cols} //properties of cols\n        selectBox = {this.selectBox} //toggle boxes\n        />\n        \n      </div>\n    );\n  }\n} // End Main Component\n\n//helper function\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr)); //deep clone because nested array - clones all arrays inside arrays\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n    <Rules />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}